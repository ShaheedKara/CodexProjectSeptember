@model Sprint1AppDev3A.Models.Bookings

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
<div>
    Travel To : <input id="Collection" type="text" name="name" />
    <input id="Dropoff" type="text" name="name" value="Coastlands Durban Pty Ltd, Doctor Pixley Kaseme Street, Durban, South Africa" readonly hidden />
    <br /><br><br />
    @*<b>Depots:  </b> <br>

        <select multiple id="waypoints">
            <option value="Umbilo, durban">Umbilo</option>
            <option value="phoenix, durban">Phoenix</option>

        </select>*@

    <div>
        <input type="button" value="Request Pickup" id="GetRoute" name="GetRoute" onclick="GetRoute()" />
    </div>
</div>
<br />
<div>
    <div id="dvDistance">
    </div>
</div>

</div>

<div id="dvMap" style="min-height:500px"></div>

<div>

</div>

@section scripts{

    <!--ENSURE YOU CHANGE TO YOUR OWN API KEY HERE !!! -->
    <script src="~/Content/Temp/js.js" type="text/javascript"></script>
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDp3VflCPmJakef2jt0FpOb1UTTgUHjVp4" type="text/javascript"></script>

    <!-- code for example 1 -->
    <script>


        var source, destination;
        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();

        // initialise the location of the map on Chichester in England (ref lat and lng)
        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: { lat: -29.856628, lng: 31.036852 },
            zoom: 13,
            mapTypeId: 'roadmap'
        });

        google.maps.event.addDomListener(window, 'load', function () {
            new google.maps.places.SearchBox(document.getElementById('Collection'));
            new google.maps.places.SearchBox(document.getElementById('Dropoff'));

            directionsDisplay = new google.maps.DirectionsRenderer({ 'draggable': true });
        });

        function GetRoute() {

            directionsDisplay.setMap(map);

            source = document.getElementById("Collection").value;
            destination = document.getElementById("Dropoff").value;
            //var waypts = [];
            //var checkboxArray = document.getElementById('waypoints');

            //for (var i = 0; i < checkboxArray.length; i++) {
            //    if (checkboxArray.options[i].selected == true) {
            //        waypts.push({
            //            location: checkboxArray[i].value,
            //            stopover: true
            //        });

            var request = {
                origin: source,
                destination: destination,
                // waypoints: waypts,
                // optimizeWaypoints: true,
                travelMode: google.maps.TravelMode.DRIVING
            };

            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                }
            });

            //*********DISTANCE AND DURATION**********************//
            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix({
                origins: [source],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, function (response, status) {

                if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
                    var distance = response.rows[0].elements[0].distance.text;
                    var duration = response.rows[0].elements[0].duration.value;
                    var dvDistance = document.getElementById("dvDistance");

                    duration = parseFloat(duration / 60).toFixed(2);
                    dvDistance.innerHTML = "";
                    dvDistance.innerHTML += "Distance: " + distance + "<br />";
                    dvDistance.innerHTML += "Time:" + duration + " min";
                    document.getElementById("testtext").value = distance

                    data = JSON.stringify({
                        distance: distance,
                        'source': source,
                        'finacharger': 0,
                        'destination': "Coastlands Durban Pty Ltd, Doctor Pixley Kaseme Street, Durban, South Africa"
                    });

                    $.ajax({
                        url: "http://localhost:49704/Bookings/Create",
                        method: "POST",
                        data: data,
                        success: function (data) {
                            alert(data)
                        },
                        contentType: 'application/json'
                    });

                } else {
                    alert("Unable to find the distance via road.");
                }
            });
        }

    </script>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Bookings</h4>
            <hr />
        </div>
        <div class="form-horizontal">
            <h4>Pick-Up Details </h4>
            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.ColStreetNum, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ColStreetNum, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ColStreetNum, "", new { @class = "text-danger"  })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ColStreetName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ColStreetName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ColStreetName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ColArea, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ColArea, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ColArea, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ColCity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ColCity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ColCity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ColCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ColCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ColCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.pickupdate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.pickupdate, new { htmlAttributes = new { @class = "form-control" }])
                    @Html.ValidationMessageFor(model => model.pickupdate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-horizontal">
            <h4>Delivery Details</h4>
            <hr />

            <div class="form-group">
                @Html.LabelFor(model => model.DelStreetNum, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DelStreetNum, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DelStreetNum, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DelStreetName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DelStreetName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DelStreetName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DelArea, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DelArea, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DelArea, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DelCity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DelCity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DelCity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DelCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DelCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DelCode, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.dropofdate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.dropofdate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.dropofdate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-horizontal">
            <h4>Client Details</h4>
            <hr />
            <div class="form-group">
                @Html.LabelFor(model => model.clientname, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.clientname, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.clientname, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.cellnum, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.cellnum, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.cellnum, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConNum, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ConNum, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ConNum, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.ConType, new List<SelectListItem>
                        {

                        new SelectListItem {Value = "6m",Text = "6m" },
                        new SelectListItem {Value = "12m",Text = "12m" },

                        }, "Select Container Type")
                    @Html.ValidationMessageFor(model => model.ConType, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.specInstruct, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.specInstruct, new List<SelectListItem>
                        {
                        new SelectListItem {Value = "None", Text = "None"},
                        new SelectListItem {Value = "Fragile", Text = "Fragile"},
                        new SelectListItem {Value = "Temperature Sensitive", Text = "Temperature Sensitive"},
                        new SelectListItem {Value = "Hazardous",Text = "Hazardous" },
                        new SelectListItem {Value = "Other",Text = "Other" },

                        }, "Special Instruction")
                    @Html.ValidationMessageFor(model => model.specInstruct, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                    @Html.LabelFor(model => model.Assigned, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.Assigned)
                            @Html.ValidationMessageFor(model => model.Assigned, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>*@

            @*<div class="form-group">
                    @Html.LabelFor(model => model.delcon, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.delcon, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.delcon, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.colcon, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.colcon, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.colcon, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @*<div class="form-group">
                    @Html.LabelFor(model => model.testtext, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.testtext, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.testtext, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @*<div class="form-group">
                    @Html.LabelFor(model => model.two, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.two, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.two, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.finna, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.finna, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.finna, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Collection, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Collection, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Collection, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Dropoff, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Dropoff, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Dropoff, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            <div>
                <input id="testtext" type="text" name="testtext" />
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <script src="~/Scripts/jquery-3.3.1.min.js"></script>
    <script src="~/Scripts/bootstrap.bundle.js"></script>
    <script type="text/javascript">
        $(function () {
            $('#datetimepicker6').datetimepicker({
                minDate: new Date()
            });
            $('#datetimepicker7').datetimepicker({
                useCurrent: false //Important! See issue #1075
            });
            $("#datetimepicker6").on("dp.change", function (e) {
                $('#datetimepicker7').data("DateTimePicker").minDate(e.date);
            });
            $("#datetimepicker7").on("dp.change", function (e) {
                $('#datetimepicker6').data("DateTimePicker").maxDate(e.date);
            });
        });
    </script>

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
}


